generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  REVIEW
  REQUIRES_PAYMENT
  PAID
  FAILED
  CANCELED @map("CANCELLED")
  REFUNDED
}

enum PaymentProvider {
  COINBASE
  STRIPE
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum WebhookStatus {
  RECEIVED
  PROCESSED
  ERROR
}

model User {
  id           String     @id @default(cuid())
  name         String?
  email        String     @unique
  passwordHash String?
  role         Role       @default(CUSTOMER)
  accounts     Account[]
  sessions     Session[]
  orders       Order[]
  auditLogs    AuditLog[]
  carts       Cart[]
  purchases   Purchase[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model Service {
  id          String      @id @default(cuid())
  slug        String      @unique
  name        String
  description String?
  imageUrl    String?
  isActive    Boolean     @default(true)
  prices      Price[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  purchaseItems PurchaseItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Price {
  id          String    @id @default(cuid())
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   String
  currency    String
  amountCents Int
  activeFrom  DateTime
  activeTo    DateTime?
  isCurrent   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Coupon {
  id               String    @id @default(cuid())
  code             String    @unique
  percentage       Int?
  amountOffCents   Int?
  validFrom        DateTime
  validTo          DateTime?
  maxRedemptions   Int?
  redemptionsCount Int       @default(0)
}

model Order {
  id            String      @id @default(cuid())
  user          User?       @relation(fields: [userId], references: [id])
  userId        String?
  email         String
  status        OrderStatus @default(PENDING)
  subtotalCents Int
  discountCents Int         @default(0)
  totalCents    Int
  currency      String
  items         OrderItem[]
  network      String?
  wallet       String?
  customerTx   String?
  provider     String?
  providerId   String?
  payments      Payment[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id              String  @id @default(cuid())
  order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String
  service         Service @relation(fields: [serviceId], references: [id])
  serviceId       String
  unitAmountCents Int
  quantity        Int     @default(1)
  currency        String
}

model Payment {
  id          String          @id @default(cuid())
  order       Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  provider    PaymentProvider
  providerRef String
  status      PaymentStatus   @default(PENDING)
  amountCents Int
  currency    String
  rawPayload  Json?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum PurchaseStatus {
  PENDING
  APPROVED
  REJECTED
}

model Cart {
  id        String    @id @default(cuid())
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  quantity  Int      @default(1)
}

model Purchase {
  id        String         @id @default(cuid())
  user      User?          @relation(fields: [userId], references: [id])
  userId    String?
  status    PurchaseStatus @default(PENDING)
  txHash    String
  network   String
  items     PurchaseItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model PurchaseItem {
  id            String    @id @default(cuid())
  purchase      Purchase  @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  purchaseId    String
  service       Service   @relation(fields: [serviceId], references: [id])
  serviceId     String
  quantity      Int       @default(1)
  unitPriceCents Int
  currency      String
}

model WebhookEvent {
  id           String          @id @default(cuid())
  provider     PaymentProvider
  eventId      String
  signature    String?
  payload      Json
  processedAt  DateTime?
  status       WebhookStatus   @default(RECEIVED)
  errorMessage String?
  createdAt    DateTime        @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  action    String
  entity    String
  entityId  String?
  diff      Json?
  createdAt DateTime @default(now())
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  handled   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Setting {
  id              Int             @id @default(1)
  defaultCurrency String          @default("USD")
  paymentProvider PaymentProvider @default(COINBASE)
  companyName     String?
  companyEmail    String?
  publicUrl       String?
  cryptoNetwork   String?
  walletAddress   String?
  qrCodeUrl       String?
}

model PaymentsConfig {
  id        Int      @id @default(1)
  network   String
  wallet    String
  qrUrl     String?
  provider  String   @default("manual")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id        String   @id @default(cuid())
  title     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Logo {
  id        String   @id @default(cuid())
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

